from verified_<actor_type>s.<module_name>.<actor_type> import <actor_name>
from verified_<actor_type>s.<module_name>.specs import <actor_name>Specification
from dat_core.pydantic_models import DatConnectionStatus, DatMessage
from conftest import *


def test_check(valid_connection_object):
    check_connection_tpl = <actor_name>().check(
        config=<actor_name>Specification(
            name='<actor_name>',
            connection_specification=valid_connection_object,
            module_name='<module_name>'
        )
    )
    assert isinstance(check_connection_tpl, DatConnectionStatus)
    assert check_connection_tpl.status.name == 'SUCCEEDED'


def test_generate(valid_connection_object, valid_dat_record_message):
    config = <actor_name>Specification(
        name='<actor_name>',
        connection_specification=valid_connection_object,
        module_name='<module_name>'
    )

    <module_name> = <actor_name>()
    records = <module_name>.generate(
        config=config,
        dat_message=DatMessage(**valid_dat_record_message),
    )
    for record in records:
        assert DatMessage.model_dump_json(record)

def test_specs_file():
    temp_specs = f'tests{os.path.sep}tmp_spec_model.py'
    yml_to_py('specs.yml', temp_specs)

    from verified_<actor_type>s.<module_name>.tests.tmp_spec_model import GoogleDriveSpecification as temp_spec
    from verified_<actor_type>s.<module_name>.tests.tmp_spec_model import ConnectionSpecificationModel as temp_conn_spec

    assert compare_models(temp_spec, <actor_name>Specification) is True
    assert compare_models(temp_conn_spec, ConnectionSpecificationModel) is True

def yml_to_py(yml_file: str, output_file: str) -> None:
    parent = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
    with open(f'{parent}{os.path.sep}{yml_file}', 'r') as file:
        datamodel = file.read()
    with TemporaryDirectory() as temporary_directory_name:
        temporary_directory = Path(temporary_directory_name)
        output = Path(temporary_directory / 'model.py')
        generate(
            datamodel,
            input_file_type=InputFileType.JsonSchema,
            output=output,
            output_model_type=DataModelType.PydanticV2BaseModel,
        )
        model: str = output.read_text()
        with open(f'{parent}{os.path.sep}{output_file}', 'w') as f:
            f.write(model)

def compare_models(model1: BaseModel, model2: BaseModel) -> bool:
    if model1.model_fields.keys() != model2.model_fields.keys():
        return False

    model1_fields = [str(item) for item in model1.model_fields.values()]
    model2_fields = [str(item) for item in model2.model_fields.values()]
    if model1_fields != model2_fields:
        return False
    return True